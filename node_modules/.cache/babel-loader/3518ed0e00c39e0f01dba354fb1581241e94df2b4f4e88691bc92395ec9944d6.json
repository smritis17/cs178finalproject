{"ast":null,"code":"import OpenAI from 'openai';\nconst useOpenAI = () => {\n  const askQuestion = async (skinColor, hairColor, eyeColor) => {\n    try {\n      // Initialize the OpenAI API with your API key\n      // const openai = new OpenAI(\"key\");\n\n      const openai = new OpenAI({\n        organization: 'org-x7LE1EOortseNW98HPCIMzye',\n        apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n        dangerouslyAllowBrowser: true\n      });\n\n      // Questions\n      const questions = [\"Given that I have ${skinColor} skin color, ${hairColor} hair color, ${eyeColor} eye color, and ${lipColor} lip color, what season am I? Give it to me in one word.\", \"What are the top 5 colors that suit me best and give me those hex colors in a list format ex. [color 1, color 2, color 3, color4, color5]. Do not output anything else.\", \"What are the worst 5 colors that I should avoid and give me those hex colors in a list format ex. [color 1, color 2, color 3, color4, color5]. Do not output anything else.\"];\n      console.log('skin color: ', skinColor);\n      console.log('hair color: ', hairColor);\n      console.log('eye color: ', eyeColor);\n      console.log('lip color: ', lipColor);\n\n      // Responses\n      const responses = [];\n      for (const question of questions) {\n        const response = await openai.chat.completions.create({\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            role: 'user',\n            content: question\n          }],\n          max_tokens: 50\n        });\n        console.log(response.choices[0].message.content.trim());\n        responses.push(response.choices[0].message.content.trim());\n      }\n      return responses;\n    } catch (error) {\n      console.error('Error fetching data from OpenAI:', error.message || error);\n      return []; // Return an empty array in case of error\n    }\n  };\n  return askQuestion;\n};\nexport default useOpenAI;","map":{"version":3,"names":["OpenAI","useOpenAI","askQuestion","skinColor","hairColor","eyeColor","openai","organization","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","questions","console","log","lipColor","responses","question","response","chat","completions","create","model","messages","role","content","max_tokens","choices","message","trim","push","error"],"sources":["/Users/iliang/Desktop/CS 178/cs178finalproject/src/hooks/useOpenAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst useOpenAI = () => {\n    const askQuestion = async (skinColor, hairColor, eyeColor) => {\n        try {\n            // Initialize the OpenAI API with your API key\n            // const openai = new OpenAI(\"key\");\n\n            const openai = new OpenAI({\n                organization: 'org-x7LE1EOortseNW98HPCIMzye', \n                apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n                dangerouslyAllowBrowser: true,\n            });\n\n            // Questions\n            const questions = [\n                \"Given that I have ${skinColor} skin color, ${hairColor} hair color, ${eyeColor} eye color, and ${lipColor} lip color, what season am I? Give it to me in one word.\",\n                \"What are the top 5 colors that suit me best and give me those hex colors in a list format ex. [color 1, color 2, color 3, color4, color5]. Do not output anything else.\",\n                \"What are the worst 5 colors that I should avoid and give me those hex colors in a list format ex. [color 1, color 2, color 3, color4, color5]. Do not output anything else.\"\n            ];\n            console.log('skin color: ', skinColor);\n            console.log('hair color: ', hairColor);\n            console.log('eye color: ', eyeColor);\n            console.log('lip color: ', lipColor);\n\n            // Responses\n            const responses = [];\n\n            for (const question of questions) {\n\n                const response = await openai.chat.completions.create({\n                    model: 'gpt-3.5-turbo',\n                    messages: [{role: 'user', content: question}],\n                    max_tokens: 50\n                });\n                console.log(response.choices[0].message.content.trim());\n\n                responses.push(response.choices[0].message.content.trim());\n            }\n\n            return responses;\n        } catch (error) {\n            console.error('Error fetching data from OpenAI:', error.message || error);\n            return []; // Return an empty array in case of error\n        }\n    };\n\n    return askQuestion;\n};\n\nexport default useOpenAI;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,MAAMC,WAAW,GAAG,MAAAA,CAAOC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,KAAK;IAC1D,IAAI;MACA;MACA;;MAEA,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC;QACtBO,YAAY,EAAE,8BAA8B;QAC5CC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB;QAC5CC,uBAAuB,EAAE;MAC7B,CAAC,CAAC;;MAEF;MACA,MAAMC,SAAS,GAAG,CACd,oKAAoK,EACpK,yKAAyK,EACzK,6KAA6K,CAChL;MACDC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEZ,SAAS,CAAC;MACtCW,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEX,SAAS,CAAC;MACtCU,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEV,QAAQ,CAAC;MACpCS,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,QAAQ,CAAC;;MAEpC;MACA,MAAMC,SAAS,GAAG,EAAE;MAEpB,KAAK,MAAMC,QAAQ,IAAIL,SAAS,EAAE;QAE9B,MAAMM,QAAQ,GAAG,MAAMb,MAAM,CAACc,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;UAClDC,KAAK,EAAE,eAAe;UACtBC,QAAQ,EAAE,CAAC;YAACC,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAER;UAAQ,CAAC,CAAC;UAC7CS,UAAU,EAAE;QAChB,CAAC,CAAC;QACFb,OAAO,CAACC,GAAG,CAACI,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;QAEvDb,SAAS,CAACc,IAAI,CAACZ,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;MAC9D;MAEA,OAAOb,SAAS;IACpB,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZlB,OAAO,CAACkB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACH,OAAO,IAAIG,KAAK,CAAC;MACzE,OAAO,EAAE,CAAC,CAAC;IACf;EACJ,CAAC;EAED,OAAO9B,WAAW;AACtB,CAAC;AAED,eAAeD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}