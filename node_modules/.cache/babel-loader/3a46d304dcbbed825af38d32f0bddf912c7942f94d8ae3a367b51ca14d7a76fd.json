{"ast":null,"code":"var _jsxFileName = \"/Users/smritisomasundaram/Downloads/cs178finalproject/src/components/face_read.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport useOpenAI from '../hooks/useOpenAI';\n\n// Initialize local storage JSON to empty\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlocalStorage.setItem('analysisResults', '');\nconst FaceRead = () => {\n  _s();\n  // State variables\n  const [imagePreview, setImagePreview] = useState(null);\n  const [selectedColor, setSelectedColor] = useState(null);\n  const [skinColor, setSkinColor] = useState('#000000');\n  const [hairColor, setHairColor] = useState('#000000');\n  const [eyeColor, setEyeColor] = useState('#000000');\n  const [lipColor, setLipColor] = useState('#000000');\n  const [borderStyle, setBorderStyle] = useState('2px solid black');\n  const [analysisResults, setAnalysisResults] = useState([]);\n  const askQuestion = useOpenAI();\n\n  // Handlers\n  const handleImageUpload = () => {\n    // Reset color buttons\n    setSkinColor('#000000');\n    setHairColor('#000000');\n    setEyeColor('#000000');\n    setLipColor('#000000');\n\n    // Create file input\n    const fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.setAttribute('accept', 'image/*');\n    fileInput.addEventListener('change', event => {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = function (event) {\n        setImagePreview(event.target.result);\n      };\n      if (file) {\n        reader.readAsDataURL(file);\n      }\n    });\n    fileInput.click();\n  };\n  const handleColorSelection = color => {\n    setSelectedColor(color);\n    setBorderStyle('2px solid black');\n  };\n  const handleImageClick = event => {\n    if (!selectedColor) return;\n    const canvas = document.createElement('canvas');\n    canvas.width = event.target.width;\n    canvas.height = event.target.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(event.target, 0, 0, canvas.width, canvas.height);\n    const pixelData = ctx.getImageData(event.nativeEvent.offsetX, event.nativeEvent.offsetY, 1, 1).data;\n    const hexColor = rgbToHex(pixelData[0], pixelData[1], pixelData[2]);\n    switch (selectedColor) {\n      case 'skin':\n        setSkinColor(hexColor);\n        break;\n      case 'hair':\n        setHairColor(hexColor);\n        break;\n      case 'eye':\n        setEyeColor(hexColor);\n        break;\n      case 'lip':\n        setLipColor(hexColor);\n        break;\n      default:\n        break;\n    }\n    setSelectedColor(null);\n    setBorderStyle('none');\n  };\n  const handleAnalyze = async () => {\n    try {\n      const responses = await askQuestion(skinColor, hairColor, eyeColor, lipColor);\n      console.log(responses);\n      // Save analysisResults to localStorage\n      localStorage.setItem('analysisResults', JSON.stringify(responses));\n    } catch (error) {\n      console.error('Error analyzing colors:', error);\n    }\n  };\n\n  // Helper functions\n  const rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  };\n  const getContrastColor = color => {\n    let r = parseInt(color.substr(1, 2), 16);\n    let g = parseInt(color.substr(3, 2), 16);\n    let b = parseInt(color.substr(5, 2), 16);\n    let luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n\n    // Black text for light colors, and white for dark colors\n    return luminance > 0.5 ? '#000000' : '#ffffff';\n  };\n\n  // JSX rendering\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'Arial, sans-serif',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleImageUpload,\n      style: {\n        marginBottom: '20px',\n        padding: '10px 20px',\n        backgroundColor: '#000',\n        color: '#fff',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Upload Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), imagePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePreview,\n        alt: \"Uploaded\",\n        style: {\n          maxWidth: '100%',\n          maxHeight: '300px',\n          cursor: selectedColor ? 'crosshair' : 'auto',\n          marginBottom: '20px'\n        },\n        onClick: handleImageClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: \"Click each button and click on the corresponding body part in the photo to pick colors.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          marginBottom: '20px'\n        },\n        children: ['skin', 'hair', 'eye', 'lip'].map(part => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"color-button\",\n            style: {\n              height: '40px',\n              width: '120px',\n              backgroundColor: eval(`${part}Color`),\n              border: selectedColor === part ? borderStyle : 'none',\n              fontWeight: selectedColor === part ? 'bold' : 'normal',\n              color: getContrastColor(eval(`${part}Color`)),\n              borderRadius: '5px',\n              fontSize: '105%',\n              cursor: 'pointer'\n            },\n            onClick: () => handleColorSelection(part),\n            children: [part.charAt(0).toUpperCase() + part.slice(1), \" Color\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)\n        }, part, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAnalyze,\n        style: {\n          fontSize: '105%',\n          backgroundColor: \"#000000\",\n          color: \"#ffffff\",\n          height: \"40px\",\n          width: \"200px\",\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(FaceRead, \"Z0MZ3NcNsFmrJIj4LYjlP5GJk7Q=\", false, function () {\n  return [useOpenAI];\n});\n_c = FaceRead;\nexport default FaceRead;\nvar _c;\n$RefreshReg$(_c, \"FaceRead\");","map":{"version":3,"names":["React","useState","useOpenAI","jsxDEV","_jsxDEV","localStorage","setItem","FaceRead","_s","imagePreview","setImagePreview","selectedColor","setSelectedColor","skinColor","setSkinColor","hairColor","setHairColor","eyeColor","setEyeColor","lipColor","setLipColor","borderStyle","setBorderStyle","analysisResults","setAnalysisResults","askQuestion","handleImageUpload","fileInput","document","createElement","setAttribute","addEventListener","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","click","handleColorSelection","color","handleImageClick","canvas","width","height","ctx","getContext","drawImage","pixelData","getImageData","nativeEvent","offsetX","offsetY","data","hexColor","rgbToHex","handleAnalyze","responses","console","log","JSON","stringify","error","r","g","b","toString","slice","getContrastColor","parseInt","substr","luminance","style","fontFamily","textAlign","children","onClick","marginBottom","padding","backgroundColor","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","maxWidth","maxHeight","display","justifyContent","map","part","marginRight","className","eval","fontWeight","fontSize","charAt","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/smritisomasundaram/Downloads/cs178finalproject/src/components/face_read.js"],"sourcesContent":["import React, { useState } from 'react';\nimport useOpenAI from '../hooks/useOpenAI';\n\n// Initialize local storage JSON to empty\nlocalStorage.setItem('analysisResults', '');\n\nconst FaceRead = () => {\n  // State variables\n  const [imagePreview, setImagePreview] = useState(null);\n  const [selectedColor, setSelectedColor] = useState(null);\n  const [skinColor, setSkinColor] = useState('#000000');\n  const [hairColor, setHairColor] = useState('#000000');\n  const [eyeColor, setEyeColor] = useState('#000000');\n  const [lipColor, setLipColor] = useState('#000000');\n  const [borderStyle, setBorderStyle] = useState('2px solid black');\n  const [analysisResults, setAnalysisResults] = useState([]);\n  const askQuestion = useOpenAI();\n\n  // Handlers\n  const handleImageUpload = () => {\n    // Reset color buttons\n    setSkinColor('#000000');\n    setHairColor('#000000');\n    setEyeColor('#000000');\n    setLipColor('#000000');\n\n    // Create file input\n    const fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.setAttribute('accept', 'image/*');\n\n    fileInput.addEventListener('change', (event) => {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n\n      reader.onload = function(event) {\n        setImagePreview(event.target.result);\n      }\n\n      if (file) {\n        reader.readAsDataURL(file);\n      }\n    });\n\n    fileInput.click();\n  };\n\n  const handleColorSelection = (color) => {\n    setSelectedColor(color);\n    setBorderStyle('2px solid black');\n  };\n\n  const handleImageClick = (event) => {\n    if (!selectedColor) return;\n\n    const canvas = document.createElement('canvas');\n    canvas.width = event.target.width;\n    canvas.height = event.target.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(event.target, 0, 0, canvas.width, canvas.height);\n\n    const pixelData = ctx.getImageData(event.nativeEvent.offsetX, event.nativeEvent.offsetY, 1, 1).data;\n    const hexColor = rgbToHex(pixelData[0], pixelData[1], pixelData[2]);\n\n    switch (selectedColor) {\n      case 'skin':\n        setSkinColor(hexColor);\n        break;\n      case 'hair':\n        setHairColor(hexColor);\n        break;\n      case 'eye':\n        setEyeColor(hexColor);\n        break;\n      case 'lip':\n        setLipColor(hexColor);\n        break;\n      default:\n        break;\n    }\n\n    setSelectedColor(null);\n    setBorderStyle('none');\n  };\n\n  const handleAnalyze = async () => {\n    try {\n      const responses = await askQuestion(skinColor, hairColor, eyeColor, lipColor);\n      console.log(responses);\n      // Save analysisResults to localStorage\n      localStorage.setItem('analysisResults', JSON.stringify(responses));\n    } catch (error) {\n      console.error('Error analyzing colors:', error);\n    }\n  };\n\n  // Helper functions\n  const rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  };\n\n  const getContrastColor = (color) => {\n    let r = parseInt(color.substr(1, 2), 16);\n    let g = parseInt(color.substr(3, 2), 16);\n    let b = parseInt(color.substr(5, 2), 16);\n\n    let luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n\n    // Black text for light colors, and white for dark colors\n    return luminance > 0.5 ? '#000000' : '#ffffff';\n  };\n\n  // JSX rendering\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', textAlign: 'center' }}>\n      <button onClick={handleImageUpload} style={{ marginBottom: '20px', padding: '10px 20px', backgroundColor: '#000', color: '#fff', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>Upload Image</button>\n      {imagePreview && (\n        <div>\n          <h3>Selected Image:</h3>\n          <img\n            src={imagePreview}\n            alt=\"Uploaded\"\n            style={{ maxWidth: '100%', maxHeight: '300px', cursor: selectedColor ? 'crosshair' : 'auto', marginBottom: '20px' }}\n            onClick={handleImageClick}\n          />\n\n          {/* Instructions */}\n          <p style={{ marginBottom: '10px' }}>Click each button and click on the corresponding body part in the photo to pick colors.</p>\n\n          {/* Color selection buttons */}\n          <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>\n            {['skin', 'hair', 'eye', 'lip'].map((part) => (\n              <div key={part} style={{ marginRight: '10px' }}>\n                <button\n                  className=\"color-button\"\n                  style={{\n                    height: '40px',\n                    width: '120px',\n                    backgroundColor: eval(`${part}Color`),\n                    border: selectedColor === part ? borderStyle : 'none',\n                    fontWeight: selectedColor === part ? 'bold' : 'normal',\n                    color: getContrastColor(eval(`${part}Color`)),\n                    borderRadius: '5px',\n                    fontSize: '105%',\n                    cursor: 'pointer'\n                  }}\n                  onClick={() => handleColorSelection(part)}\n                >\n                  {part.charAt(0).toUpperCase() + part.slice(1)} Color\n                </button>\n              </div>\n            ))}\n          </div>\n\n          <button onClick={handleAnalyze} style={{ fontSize: '105%', backgroundColor: \"#000000\", color: \"#ffffff\", height: \"40px\", width: \"200px\", border: 'none', borderRadius: '5px', cursor: 'pointer' }}>Analyze</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FaceRead;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,oBAAoB;;AAE1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;AAE3C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,SAAS,CAAC;EACrD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,SAAS,CAAC;EACrD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,SAAS,CAAC;EACnD,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,SAAS,CAAC;EACnD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,iBAAiB,CAAC;EACjE,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMwB,WAAW,GAAGvB,SAAS,CAAC,CAAC;;EAE/B;EACA,MAAMwB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACAZ,YAAY,CAAC,SAAS,CAAC;IACvBE,YAAY,CAAC,SAAS,CAAC;IACvBE,WAAW,CAAC,SAAS,CAAC;IACtBE,WAAW,CAAC,SAAS,CAAC;;IAEtB;IACA,MAAMO,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IACjDF,SAAS,CAACG,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IACtCH,SAAS,CAACG,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC;IAE3CH,SAAS,CAACI,gBAAgB,CAAC,QAAQ,EAAGC,KAAK,IAAK;MAC9C,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAM,GAAG,UAASN,KAAK,EAAE;QAC9BtB,eAAe,CAACsB,KAAK,CAACE,MAAM,CAACK,MAAM,CAAC;MACtC,CAAC;MAED,IAAIN,IAAI,EAAE;QACRG,MAAM,CAACI,aAAa,CAACP,IAAI,CAAC;MAC5B;IACF,CAAC,CAAC;IAEFN,SAAS,CAACc,KAAK,CAAC,CAAC;EACnB,CAAC;EAED,MAAMC,oBAAoB,GAAIC,KAAK,IAAK;IACtC/B,gBAAgB,CAAC+B,KAAK,CAAC;IACvBrB,cAAc,CAAC,iBAAiB,CAAC;EACnC,CAAC;EAED,MAAMsB,gBAAgB,GAAIZ,KAAK,IAAK;IAClC,IAAI,CAACrB,aAAa,EAAE;IAEpB,MAAMkC,MAAM,GAAGjB,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CgB,MAAM,CAACC,KAAK,GAAGd,KAAK,CAACE,MAAM,CAACY,KAAK;IACjCD,MAAM,CAACE,MAAM,GAAGf,KAAK,CAACE,MAAM,CAACa,MAAM;IACnC,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,SAAS,CAAClB,KAAK,CAACE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEW,MAAM,CAACC,KAAK,EAAED,MAAM,CAACE,MAAM,CAAC;IAE9D,MAAMI,SAAS,GAAGH,GAAG,CAACI,YAAY,CAACpB,KAAK,CAACqB,WAAW,CAACC,OAAO,EAAEtB,KAAK,CAACqB,WAAW,CAACE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI;IACnG,MAAMC,QAAQ,GAAGC,QAAQ,CAACP,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;IAEnE,QAAQxC,aAAa;MACnB,KAAK,MAAM;QACTG,YAAY,CAAC2C,QAAQ,CAAC;QACtB;MACF,KAAK,MAAM;QACTzC,YAAY,CAACyC,QAAQ,CAAC;QACtB;MACF,KAAK,KAAK;QACRvC,WAAW,CAACuC,QAAQ,CAAC;QACrB;MACF,KAAK,KAAK;QACRrC,WAAW,CAACqC,QAAQ,CAAC;QACrB;MACF;QACE;IACJ;IAEA7C,gBAAgB,CAAC,IAAI,CAAC;IACtBU,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;EAED,MAAMqC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,SAAS,GAAG,MAAMnC,WAAW,CAACZ,SAAS,EAAEE,SAAS,EAAEE,QAAQ,EAAEE,QAAQ,CAAC;MAC7E0C,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;MACtB;MACAvD,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEyD,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMP,QAAQ,GAAGA,CAACQ,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAK;IAC5B,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAKF,CAAC,IAAI,EAAE,CAAC,IAAIC,CAAC,IAAI,CAAC,CAAC,GAAGC,CAAC,EAAEC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3E,CAAC;EAED,MAAMC,gBAAgB,GAAI5B,KAAK,IAAK;IAClC,IAAIuB,CAAC,GAAGM,QAAQ,CAAC7B,KAAK,CAAC8B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC,IAAIN,CAAC,GAAGK,QAAQ,CAAC7B,KAAK,CAAC8B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC,IAAIL,CAAC,GAAGI,QAAQ,CAAC7B,KAAK,CAAC8B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAExC,IAAIC,SAAS,GAAG,CAAC,MAAM,GAAGR,CAAC,GAAG,MAAM,GAAGC,CAAC,GAAG,MAAM,GAAGC,CAAC,IAAI,GAAG;;IAE5D;IACA,OAAOM,SAAS,GAAG,GAAG,GAAG,SAAS,GAAG,SAAS;EAChD,CAAC;;EAED;EACA,oBACEtE,OAAA;IAAKuE,KAAK,EAAE;MAAEC,UAAU,EAAE,mBAAmB;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBACnE1E,OAAA;MAAQ2E,OAAO,EAAErD,iBAAkB;MAACiD,KAAK,EAAE;QAAEK,YAAY,EAAE,MAAM;QAAEC,OAAO,EAAE,WAAW;QAAEC,eAAe,EAAE,MAAM;QAAEvC,KAAK,EAAE,MAAM;QAAEwC,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAU,CAAE;MAAAP,QAAA,EAAC;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC/MhF,YAAY,iBACXL,OAAA;MAAA0E,QAAA,gBACE1E,OAAA;QAAA0E,QAAA,EAAI;MAAe;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBrF,OAAA;QACEsF,GAAG,EAAEjF,YAAa;QAClBkF,GAAG,EAAC,UAAU;QACdhB,KAAK,EAAE;UAAEiB,QAAQ,EAAE,MAAM;UAAEC,SAAS,EAAE,OAAO;UAAER,MAAM,EAAE1E,aAAa,GAAG,WAAW,GAAG,MAAM;UAAEqE,YAAY,EAAE;QAAO,CAAE;QACpHD,OAAO,EAAEnC;MAAiB;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC,eAGFrF,OAAA;QAAGuE,KAAK,EAAE;UAAEK,YAAY,EAAE;QAAO,CAAE;QAAAF,QAAA,EAAC;MAAuF;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAG/HrF,OAAA;QAAKuE,KAAK,EAAE;UAAEmB,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,QAAQ;UAAEf,YAAY,EAAE;QAAO,CAAE;QAAAF,QAAA,EAC7E,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAACkB,GAAG,CAAEC,IAAI,iBACvC7F,OAAA;UAAgBuE,KAAK,EAAE;YAAEuB,WAAW,EAAE;UAAO,CAAE;UAAApB,QAAA,eAC7C1E,OAAA;YACE+F,SAAS,EAAC,cAAc;YACxBxB,KAAK,EAAE;cACL5B,MAAM,EAAE,MAAM;cACdD,KAAK,EAAE,OAAO;cACdoC,eAAe,EAAEkB,IAAI,CAAE,GAAEH,IAAK,OAAM,CAAC;cACrCd,MAAM,EAAExE,aAAa,KAAKsF,IAAI,GAAG5E,WAAW,GAAG,MAAM;cACrDgF,UAAU,EAAE1F,aAAa,KAAKsF,IAAI,GAAG,MAAM,GAAG,QAAQ;cACtDtD,KAAK,EAAE4B,gBAAgB,CAAC6B,IAAI,CAAE,GAAEH,IAAK,OAAM,CAAC,CAAC;cAC7Cb,YAAY,EAAE,KAAK;cACnBkB,QAAQ,EAAE,MAAM;cAChBjB,MAAM,EAAE;YACV,CAAE;YACFN,OAAO,EAAEA,CAAA,KAAMrC,oBAAoB,CAACuD,IAAI,CAAE;YAAAnB,QAAA,GAEzCmB,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGP,IAAI,CAAC3B,KAAK,CAAC,CAAC,CAAC,EAAC,QAChD;UAAA;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC,GAjBDQ,IAAI;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAkBT,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENrF,OAAA;QAAQ2E,OAAO,EAAEpB,aAAc;QAACgB,KAAK,EAAE;UAAE2B,QAAQ,EAAE,MAAM;UAAEpB,eAAe,EAAE,SAAS;UAAEvC,KAAK,EAAE,SAAS;UAAEI,MAAM,EAAE,MAAM;UAAED,KAAK,EAAE,OAAO;UAAEqC,MAAM,EAAE,MAAM;UAAEC,YAAY,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAU,CAAE;QAAAP,QAAA,EAAC;MAAO;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChN,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjF,EAAA,CAzJID,QAAQ;EAAA,QAUQL,SAAS;AAAA;AAAAuG,EAAA,GAVzBlG,QAAQ;AA2Jd,eAAeA,QAAQ;AAAC,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}