{"ast":null,"code":"import OpenAI from 'openai';\nconst useOpenAI = () => {\n  const askQuestion = async (skinColor, hairColor, eyeColor) => {\n    try {\n      // Initialize the OpenAI API with your API key\n      // const openai = new OpenAI(\"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\");\n\n      const openai = new OpenAI({\n        organization: 'org-x7LE1EOortseNW98HPCIMzye',\n        apiKey: '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',\n        dangerouslyAllowBrowser: true\n      });\n\n      // Questions\n      const questions = [`Given that I have ${skinColor} skin color, ${hairColor} hair color, and ${eyeColor} eye color, what seasonal color am I?`, \"What are the top 5 colors that suit me best and give me those hex colors in a list format ex. {color 1, color 2, color 3, etc}\", \"What are the worst 5 colors that I should avoid and give me those hex colors in a list format ex. {color1, color2, color3, etc}\"];\n\n      // Responses\n      const responses = [];\n      for (const question of questions) {\n        const response = await openai.chat.completions.create({\n          model: 'gpt-3.5-turbo',\n          messages: question,\n          max_tokens: 50\n        });\n        responses.push(response.choices[0].text.trim());\n        console.log(response.choices[0].text.trim());\n      }\n      return responses;\n    } catch (error) {\n      console.error('Error fetching data from OpenAI:', error.message || error);\n      return []; // Return an empty array in case of error\n    }\n  };\n  return askQuestion;\n};\nexport default useOpenAI;","map":{"version":3,"names":["OpenAI","useOpenAI","askQuestion","skinColor","hairColor","eyeColor","openai","organization","apiKey","dangerouslyAllowBrowser","questions","responses","question","response","chat","completions","create","model","messages","max_tokens","push","choices","text","trim","console","log","error","message"],"sources":["/Users/iliang/Desktop/CS 178/cs178finalproject/src/hooks/useOpenAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst useOpenAI = () => {\n    const askQuestion = async (skinColor, hairColor, eyeColor) => {\n        try {\n            // Initialize the OpenAI API with your API key\n            // const openai = new OpenAI(\"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\");\n\n            const openai = new OpenAI({\n                organization: 'org-x7LE1EOortseNW98HPCIMzye', \n                apiKey: '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',\n                dangerouslyAllowBrowser: true,\n            });\n\n            // Questions\n            const questions = [\n                `Given that I have ${skinColor} skin color, ${hairColor} hair color, and ${eyeColor} eye color, what seasonal color am I?`,\n                \"What are the top 5 colors that suit me best and give me those hex colors in a list format ex. {color 1, color 2, color 3, etc}\",\n                \"What are the worst 5 colors that I should avoid and give me those hex colors in a list format ex. {color1, color2, color3, etc}\"\n            ];\n\n            // Responses\n            const responses = [];\n\n            for (const question of questions) {\n\n                const response = await openai.chat.completions.create({\n                    model: 'gpt-3.5-turbo',\n                    messages: question,\n                    max_tokens: 50\n                });\n\n                responses.push(response.choices[0].text.trim());\n                console.log(response.choices[0].text.trim());\n            }\n\n            return responses;\n        } catch (error) {\n            console.error('Error fetching data from OpenAI:', error.message || error);\n            return []; // Return an empty array in case of error\n        }\n    };\n\n    return askQuestion;\n};\n\nexport default useOpenAI;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,MAAMC,WAAW,GAAG,MAAAA,CAAOC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,KAAK;IAC1D,IAAI;MACA;MACA;;MAEA,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC;QACtBO,YAAY,EAAE,8BAA8B;QAC5CC,MAAM,EAAE,qDAAqD;QAC7DC,uBAAuB,EAAE;MAC7B,CAAC,CAAC;;MAEF;MACA,MAAMC,SAAS,GAAG,CACb,qBAAoBP,SAAU,gBAAeC,SAAU,oBAAmBC,QAAS,uCAAsC,EAC1H,gIAAgI,EAChI,iIAAiI,CACpI;;MAED;MACA,MAAMM,SAAS,GAAG,EAAE;MAEpB,KAAK,MAAMC,QAAQ,IAAIF,SAAS,EAAE;QAE9B,MAAMG,QAAQ,GAAG,MAAMP,MAAM,CAACQ,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;UAClDC,KAAK,EAAE,eAAe;UACtBC,QAAQ,EAAEN,QAAQ;UAClBO,UAAU,EAAE;QAChB,CAAC,CAAC;QAEFR,SAAS,CAACS,IAAI,CAACP,QAAQ,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;QAC/CC,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;MAChD;MAEA,OAAOZ,SAAS;IACpB,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACC,OAAO,IAAID,KAAK,CAAC;MACzE,OAAO,EAAE,CAAC,CAAC;IACf;EACJ,CAAC;EAED,OAAOxB,WAAW;AACtB,CAAC;AAED,eAAeD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}