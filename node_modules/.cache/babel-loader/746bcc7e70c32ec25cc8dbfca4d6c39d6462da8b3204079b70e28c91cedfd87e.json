{"ast":null,"code":"import OpenAI from 'openai';\nconst useOpenAI = () => {\n  const askQuestion = async (skinColor, hairColor, eyeColor, lipColor) => {\n    try {\n      // Initialize the OpenAI API with your API key\n      // const openai = new OpenAI(\"key\");\n\n      const openai = new OpenAI({\n        organization: 'org-x7LE1EOortseNW98HPCIMzye',\n        apiKey: 'sk-proj-qK372Oh61ikQ7QnDdHB8T3BlbkFJmDypaQ8S7ZZTHxJCNp4O',\n        dangerouslyAllowBrowser: true\n      });\n\n      // Questions\n      const questions = [`Based on my complexion with ${skinColor} skin, ${hairColor} hair, ${eyeColor} eyes, and ${lipColor} lips, which season best describes my seasonal color palette and why? Format this in the following: season, explanation`, \"Why is this my seasonal color palette?\", \"Based on my seasonal color palette, could you provide me with the top 5 colors to wear that complement my appearance? Please list them in hexadecimal format like this: #000000, #000000, #000000 , #000000, #000000 . Exclude any additional information.\", \"Based on my seasonal color palette, what are the least flattering colors for me to wear? I'd like to avoid them. Can you list the bottom 5 colors in hexadecimal format like the following: #000000, #000000, #000000 , #000000, #000000 . Omit any other details.\"];\n      console.log('skin color: ', skinColor);\n      console.log('hair color: ', hairColor);\n      console.log('eye color: ', eyeColor);\n      console.log('lip color: ', lipColor);\n\n      // Responses\n      const responses = [];\n      for (const question of questions) {\n        const response = await openai.chat.completions.create({\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            role: 'user',\n            content: question\n          }],\n          max_tokens: 70\n        });\n        console.log(response.choices[0].message.content.trim());\n        responses.push(response.choices[0].message.content.trim());\n      }\n      return responses;\n    } catch (error) {\n      console.error('Error fetching data from OpenAI:', error.message || error);\n      return []; // Return an empty array in case of error\n    }\n  };\n  return askQuestion;\n};\nexport default useOpenAI;","map":{"version":3,"names":["OpenAI","useOpenAI","askQuestion","skinColor","hairColor","eyeColor","lipColor","openai","organization","apiKey","dangerouslyAllowBrowser","questions","console","log","responses","question","response","chat","completions","create","model","messages","role","content","max_tokens","choices","message","trim","push","error"],"sources":["/Users/smritisomasundaram/Downloads/cs178finalproject/src/hooks/useOpenAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst useOpenAI = () => {\n    const askQuestion = async (skinColor, hairColor, eyeColor, lipColor) => {\n        try {\n            // Initialize the OpenAI API with your API key\n            // const openai = new OpenAI(\"key\");\n\n            const openai = new OpenAI({\n                organization: 'org-x7LE1EOortseNW98HPCIMzye', \n                apiKey: 'sk-proj-qK372Oh61ikQ7QnDdHB8T3BlbkFJmDypaQ8S7ZZTHxJCNp4O',\n                dangerouslyAllowBrowser: true,\n            });\n\n            // Questions\n            const questions = [\n                `Based on my complexion with ${skinColor} skin, ${hairColor} hair, ${eyeColor} eyes, and ${lipColor} lips, which season best describes my seasonal color palette and why? Format this in the following: season, explanation`,\n                \"Why is this my seasonal color palette?\",\n                \"Based on my seasonal color palette, could you provide me with the top 5 colors to wear that complement my appearance? Please list them in hexadecimal format like this: #000000, #000000, #000000 , #000000, #000000 . Exclude any additional information.\", \n                \"Based on my seasonal color palette, what are the least flattering colors for me to wear? I'd like to avoid them. Can you list the bottom 5 colors in hexadecimal format like the following: #000000, #000000, #000000 , #000000, #000000 . Omit any other details.\"\n            ];\n            console.log('skin color: ', skinColor);\n            console.log('hair color: ', hairColor);\n            console.log('eye color: ', eyeColor);\n            console.log('lip color: ', lipColor);\n\n            // Responses\n            const responses = [];\n\n            for (const question of questions) {\n\n                const response = await openai.chat.completions.create({\n                    model: 'gpt-3.5-turbo',\n                    messages: [{role: 'user', content: question}],\n                    max_tokens: 70\n                });\n                console.log(response.choices[0].message.content.trim());\n\n                responses.push(response.choices[0].message.content.trim());\n            }\n\n            return responses;\n        } catch (error) {\n            console.error('Error fetching data from OpenAI:', error.message || error);\n            return []; // Return an empty array in case of error\n        }\n    };\n\n    return askQuestion;\n};\n\nexport default useOpenAI;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,MAAMC,WAAW,GAAG,MAAAA,CAAOC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IACpE,IAAI;MACA;MACA;;MAEA,MAAMC,MAAM,GAAG,IAAIP,MAAM,CAAC;QACtBQ,YAAY,EAAE,8BAA8B;QAC5CC,MAAM,EAAE,0DAA0D;QAClEC,uBAAuB,EAAE;MAC7B,CAAC,CAAC;;MAEF;MACA,MAAMC,SAAS,GAAG,CACb,+BAA8BR,SAAU,UAASC,SAAU,UAASC,QAAS,cAAaC,QAAS,yHAAwH,EAC5N,wCAAwC,EACxC,4PAA4P,EAC5P,oQAAoQ,CACvQ;MACDM,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEV,SAAS,CAAC;MACtCS,OAAO,CAACC,GAAG,CAAC,cAAc,EAAET,SAAS,CAAC;MACtCQ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAER,QAAQ,CAAC;MACpCO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,QAAQ,CAAC;;MAEpC;MACA,MAAMQ,SAAS,GAAG,EAAE;MAEpB,KAAK,MAAMC,QAAQ,IAAIJ,SAAS,EAAE;QAE9B,MAAMK,QAAQ,GAAG,MAAMT,MAAM,CAACU,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;UAClDC,KAAK,EAAE,eAAe;UACtBC,QAAQ,EAAE,CAAC;YAACC,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAER;UAAQ,CAAC,CAAC;UAC7CS,UAAU,EAAE;QAChB,CAAC,CAAC;QACFZ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;QAEvDb,SAAS,CAACc,IAAI,CAACZ,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;MAC9D;MAEA,OAAOb,SAAS;IACpB,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZjB,OAAO,CAACiB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACH,OAAO,IAAIG,KAAK,CAAC;MACzE,OAAO,EAAE,CAAC,CAAC;IACf;EACJ,CAAC;EAED,OAAO3B,WAAW;AACtB,CAAC;AAED,eAAeD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}